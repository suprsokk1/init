---
- name: COMPOSE
  hosts: 'virtual'
  connection: local
  gather_facts: false
  become: false
  become_user: root
  run_once: true
  no_log: false
  handlers:
    - name: TODO compose handlers
      meta: noop

  tasks:
    - name: Create 'compose.yml' to '/opt'
      ansible.builtin.copy:
        dest: '/opt/compose.yml'
        # src: docker/compose.yml
        mode: '0600'
        owner: 'root'
        group: 'root'
        content: >-
          {{ composefile | to_yaml }}

    - name: "Create '/opt/tailscale.env'"
      ansible.builtin.copy:
        dest: '/opt/tailscale.env'
        content: |
          TS_AUTHKEY={{ ts_auth_key | d(ts_key_default) }}
        mode: '0600'
        owner: 'root'
        group: 'root'

    - name: "Start 'tailscale'"
      ansible.builtin.shell: >-
        docker compose up --detach
      args:
        chdir: '/opt'

  vars:
    host_or_fqdn: >-
      {{ fqdn | d(ansible_host) }}

    traefik_http_challenge: &HTTP_CHALLENGE
      command:
        - "--acme.storage=acme.json"
        - "--acme.entryPoint=https"
        - "--acme.onHostRule=true"
        - "--acme.httpchallenge.entrypoint=http"
    traefik_dns_challenge: &DNS_CHALLENGE
      command:
        - "--acme.dnsChallenge.disablePropagationCheck=false"
        - "--acme.dnsChallenge.provider=digitalocean"
        - "--acme.onHostRule=true"
        - "--acme.storage=acme.json"

    _:
      resolver:
        name: "frontend"
      network:
        name: "frontend"
      service:
        name: "api@internal"

    composefile:
      networks:
        frontend:
          external: false

      services:
        traefik:
          # <<: *HTTP_CHALLENGE
          image: "traefik:v3.5"
          container_name: "traefik"
          command:
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--providers.docker=true"
            - "--providers.docker.network={{ _.network.name }}"
            - "--api.dashboard=true"
            - "--log.level=INFO"
            - "--certificatesresolvers.{{ _.resolver.name }}.acme.tlschallenge=true"
            - "--certificatesresolvers.{{ _.resolver.name }}.acme.email={{ acme_challenge_email }}"
            - "--certificatesresolvers.{{ _.resolver.name }}.acme.storage=/acme.json"
          ports:
            - "80:80"
            - "443:443"
            # - "8080:8080"
          volumes: &DOCKER_HOST
            - "/var/run/docker.sock:/var/run/docker.sock:ro"
          networks:
            - "{{ _.network.name }}"

        whoami:
          image: "traefik/whoami"
          container_name: "{{ host_or_fqdn }}"
          expose:
            - "80"
          networks:
            - "{{ _.network.name }}"
          labels:
            - "traefik.enable=true"
            - "traefik.http.routers.api.rule=Host(`{{ host_or_fqdn }}`)"
            - "traefik.http.routers.api.service={{ _.service.name }}"
            - "traefik.http.routers.api.tls=true"
            - "traefik.http.routers.api.tls.certresolver={{ _.resolver.name }}"

        tailscale-nginx:
          image: "tailscale/tailscale:latest"
          hostname: "{{ fqdn | d(ansible_host) }}"
          environment:
            - "TS_STATE_DIR=/var/lib/tailscale"
            - "TS_USERSPACE=false"
            # - "TS_EXTRA_ARGS=--advertise-tags=tag:container --reset"
          devices:
            - "/dev/net/tun:/dev/net/tun"
          cap_add:
            - "net_admin"
          restart: "unless-stopped"
          env_file:
            - "tailscale.env"
          volumes:
            - "/opt/tailscale-nginx/state:/var/lib/tailscale"

        ntfy:
          image: "binwiederhier/ntfy"
          container_name: ntfy
          command:
            - "serve"
          volumes:
            - "/var/cache/ntfy:/var/cache/ntfy"
            - "/etc/ntfy:/etc/ntfy"
          healthcheck:
            test:
              - "CMD-SHELL"
              - "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"
            interval: "60s"
            timeout: "10s"
            retries: 3
            start_period: "40s"
          restart: unless-stopped
          # labels:
          #   - "traefik.enable=true"
          #   - "traefik.http.routers.whoami.rule=Host(`{{ domain }}`)"
          #   - "traefik.http.routers.whoami.entrypoints=web"
          # environment:
          #   - TZ=UTC    # optional: set desired timezone
          # user: UID:GID # optional: replace with your own user/group or uid/gid
          # ports:
          #   - 10080:80

        nginx:
          image: "nginx"
          depends_on:
            - "tailscale-nginx"
          network_mode: "service:tailscale-nginx"

        autoheal:
          image: "willfarrell/autoheal"
          environment:
            AUTOHEAL_CONTAINER_LABEL: "all"
            AUTOHEAL_INTERVAL: 5
            AUTOHEAL_START_PERIOD: 0
            AUTOHEAL_DEFAULT_STOP_TIMEOUT: 10
            DOCKER_SOCK: "/var/run/docker.sock"
            CURL_TIMEOUT: 30
          privileged: true
          restart: "always"
          volumes: 
            - "/var/run/docker.sock:/var/run/docker.sock:rw"

    acme_challenge_email: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      63313963646165633166333438393564333538636132363030643833643266663564303263363166
      3863646531656337653833613532653066353865656362650a346331353165663933626639303737
      34386434316666663434653830656537346430633234313930363330343032393835623864653866
      3535613263353033660a326561373438633562323332626665333965663931366332633336363638
      65613431353533336565646164306331616230643638396430396234363035353162

    ts_auth_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      36373131643239643731613633336436363530306365366436616334643662383838366539656263
      3936373864336237316130663936643537313465323134620a666262323639363462313463326361
      32373163646536343830643533643866386463366232643765306534626437393131633130666164
      3834633835353734370a613739333731346134646136303966626233316637393766373966303537
      34313630643339656530636435323234333939613433663531653830386365333562383837623735
      63666564613866643061326638353831313462616431366361666661393034643133346461333436
      326165646534613063333234373335316638

- name: UFW
  hosts: 'ubuntu-vm'
  connection: local
  gather_facts: false
  become: false
  become_user: root
  no_log: false
  tasks:
    - name: Open HTTP, HTTP alt. and HTTPS
      loop:
        - 80
        - 8080
        - 443
      community.general.ufw:
        rule: allow
        port: '{{ item }}'
        proto: tcp
...
