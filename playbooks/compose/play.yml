---
- name: COMPOSE
  hosts: 'virtual'
  connection: local
  gather_facts: false
  become: false
  become_user: root
  run_once: true
  no_log: false
  handlers:
    - name: TODO compose handlers
      meta: noop

  tasks:
    - name: Create 'compose.yml' to '/opt'
      ansible.builtin.copy:
        dest: /opt/compose.yml
        # src: docker/compose.yml
        mode: '0600'
        owner: 'root'
        group: 'root'
        content: >-
          {{ composefile | to_yaml }}

    - name: "Create '/opt/tailscale.env'"
      ansible.builtin.copy:
        dest: '/opt/tailscale.env'
        content: |
          TS_AUTHKEY={{ ts-admin-access-token | d(ts_key_default) }}
        mode: '0600'
        owner: 'root'
        group: 'root'

    - name: Copy files to remote locations
      loop: "{{ do_hosts|d([ansible_host]) }}"
      copy:
        mode: '0600'
        owner: 'root'
        group: 'root'
        content: |
          {{ _services | to_yaml }}
      vars:
        _services:
          whoami:
            image: "traefik/whoami"
            container_name: "whoami-{{ item }}"
            labels:
              - "traefik.enable=true"
              - "traefik.http.routers.whoami.rule=Host(`{{ item }}`)"
              - "traefik.http.routers.whoami.entrypoints=web"

    - name: "Start 'tailscale'"
      ansible.builtin.shell: >-
        docker compose up --detach
      args:
        chdir: '/opt'

  vars:
    do-admin-access-token: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      35626232366630386433616136643630343831633331343761656436303132303263613163376535
      3431303339376363366639333962643137613932326331360a343333636365633330613766336632
      37303832386334323430313636336664633738376238316131643537376332636434633163373831
      3763303737383163370a323661303632653761346665636431343730323636666166613733313236
      31316464333064643066663261636566303635323830613061616138653263343333323836323135
      35353864303837326362386638316462393136336637303966393965373063613366653336363361
      37343266336362396230626335643337343837386332313761373962663463613562323534323238
      33616132656633616336

    composefile:
      services:
        traefik:
          image: "traefik:v3.5"
          container_name: "traefik"
          command:
            #- "--log.level=DEBUG"
            - "--api.insecure=true"
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--entryPoints.web.address=:80"
          ports:
            - "80:80"
            - "443:443"
            - "8080:8080"
          volumes: &DOCKER_HOST
            - "/var/run/docker.sock:/var/run/docker.sock:ro"

        tailscale-nginx:
          image: "tailscale/tailscale:latest"
          hostname: "{{ ansible_host }}"
          environment:
            - "TS_STATE_DIR=/var/lib/tailscale"
            - "TS_USERSPACE=false"
            # - "TS_EXTRA_ARGS=--advertise-tags=tag:container --reset"
          devices:
            - "/dev/net/tun:/dev/net/tun"
          cap_add:
            - "net_admin"
          restart: "unless-stopped"
          env_file:
            - "tailscale.env"
          volumes:
            - "/opt/tailscale-nginx/state:/var/lib/tailscale"

        # nginx:
        #   image: "nginx"
        #   depends_on:
        #     - "tailscale-nginx"
        #   network_mode: "service:tailscale-nginx"

        autoheal:
          image: "willfarrell/autoheal"
          environment:
            AUTOHEAL_CONTAINER_LABEL: "all"
            AUTOHEAL_INTERVAL: 5
            AUTOHEAL_START_PERIOD: 0
            AUTOHEAL_DEFAULT_STOP_TIMEOUT: 10
            DOCKER_SOCK: "/var/run/docker.sock"
            CURL_TIMEOUT: 30
          privileged: true
          restart: "always"
          volumes: 
            - "/var/run/docker.sock:/var/run/docker.sock:rw"

- name: UFW
  hosts: 'ubuntu-vm'
  connection: local
  gather_facts: false
  become: false
  become_user: root
  no_log: false
  tasks:
    - name: Open HTTP and HTTPS
      loop:
        - 80
        - 443
      community.general.ufw:
        rule: allow
        port: '{{ item }}'
        proto: tcp
...
