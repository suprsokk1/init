---
- name: COMPOSE
  hosts: 'virtual'
  connection: local
  gather_facts: false
  become: false
  become_user: root
  run_once: true
  no_log: false
  handlers:
    - name: TODO compose handlers
      meta: noop

  tasks:
    - name: "Create 'compose.yml' to '/opt'"
      ansible.builtin.copy:
        dest: '/opt/compose.yml'
        # src: docker/compose.yml
        mode: '0600'
        owner: 'root'
        group: 'root'
        content: >-
          {{ composefile | to_yaml }}

    - name: "Create '/opt/tailscale.env'"
      ansible.builtin.copy:
        dest: '/opt/tailscale.env'
        content: |
          TS_AUTHKEY={{ ts_auth_key | d(ts_key_default) }}
        mode: '0600'
        owner: 'root'
        group: 'root'

    - name: "Start 'tailscale'"
      ansible.builtin.shell: >-
        docker compose up --detach
      args:
        chdir: '/opt'

  vars:
    host_or_fqdn: >-
      {{ fqdn | d(ansible_host) }}

    traefik_http_challenge: &HTTP_CHALLENGE
      traefik:
        command:
          - "--acme.storage=acme.json"
          - "--acme.entryPoint=https"
          - "--acme.onHostRule=true"
          - "--acme.httpchallenge.entrypoint=http"

    traefik_dns_challenge: &DNS_CHALLENGE
      traefik:
        command:
          - "--acme.dnsChallenge.disablePropagationCheck=false"
          - "--acme.dnsChallenge.provider=digitalocean"
          - "--acme.onHostRule=true"
          - "--acme.storage=acme.json"

    traefik_plugin_crowdsec: &CROWDSEC
      traefik:
        command:
          - "--experimental.plugins.crowdsec-bouncer-traefik-plugin.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin"
          - "--experimental.plugins.crowdsec-bouncer-traefik-plugin.version=v1.4.4"

    traefik_plugin_geoblock: &GEOBLOCKING
      traefik:
        command:
          - "--experimental.plugins.geoblock.modulename=github.com/PascalMinder/geoblock"
          - "--experimental.plugins.geoblock.version=v0.3.3"

    docker_sock_ro: &DOCKER_SOCK_RO
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock:ro"

    docker_sock_rw: &DOCKER_SOCK_RW
      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock:rw"

    proxy_network: &PROXY_NETWORK
      networks:
        proxy:
          name: "proxy"
          external: false

      services:
        traefik:
          networks:
            - "proxy"
        whoami:
          networks:
            - "proxy"

    tailscale: &TAILSCALE
      service:
        tailscale-nginx:
          image: "tailscale/tailscale:latest"
          hostname: "{{ fqdn | d(ansible_host) }}"
          environment:
            - "TS_STATE_DIR=/var/lib/tailscale"
            - "TS_USERSPACE=false"
            # - "TS_EXTRA_ARGS=--advertise-tags=tag:container --reset"
          devices:
            - "/dev/net/tun:/dev/net/tun"
          cap_add:
            - "net_admin"
          restart: "unless-stopped"
          env_file:
            - "tailscale.env"
          volumes:
            - "/opt/tailscale-nginx/state:/var/lib/tailscale"

        nginx:
          image: "nginx"
          depends_on:
            - "tailscale-nginx"
          network_mode: "service:tailscale-nginx"


    autoheal: &AUTOHEAL
      services:
        autoheal:
          image: "willfarrell/autoheal"
          environment:
            AUTOHEAL_CONTAINER_LABEL: "all"
            AUTOHEAL_INTERVAL: 5
            AUTOHEAL_START_PERIOD: 0
            AUTOHEAL_DEFAULT_STOP_TIMEOUT: 10
            DOCKER_SOCK: "/var/run/docker.sock"
            CURL_TIMEOUT: 30
          privileged: true
          restart: "always"
          <<: *DOCKER_SOCK_RW

        ntfy:
          healthcheck:
            test:
              - "CMD-SHELL"
              - >-
                wget -q --tries=1 http://localhost:80/v1/health -O - |
                  grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1
            interval: "60s"
            timeout: "10s"
            retries: 3
            start_period: "40s"

    traefik_resolver_name: "http"
    traefik_network_name: "proxy"
    traefik_service_name: "api@internal"
    traefik_router_name: "whoami"
    traefik_middleware_name: "simpleauth"
    traefik_web_entrypoint_name: "web"
    traefik_websecure_entrypoint_name: "websecure"

    composefile:
      # configs:
      #   traefik:
      #     content: |
      #       ---
      #       tls:
      #         certificates:
      #           - certFile: /certs/local.crt
      #             keyFile:  /certs/local.key
      #       ...

      networks:
        proxy:
          name: proxy

      services:
        traefik:
          image: traefik:v3.4
          container_name: traefik
          restart: unless-stopped
          security_opt:
            - no-new-privileges:true
          # configs:
          #   - "traefik:/dynamic/tls.yaml"
          networks:
           # Connect to the 'traefik_proxy' overlay network for inter-container communication across nodes
            - proxy
          ports:
            - "80:80"
            - "443:443"
            - "8080:8080"
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ./certs:/certs:ro
            - ./dynamic:/dynamic:ro
          command:
            # EntryPoints
            - "--entrypoints.web.address=:80"
            - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
            - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
            - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
            - "--entrypoints.websecure.address=:443"
            - "--entrypoints.websecure.http.tls=true"

            # Attach the static configuration tls.yaml file that contains the tls
            # configuration settings
            # - "--providers.file.filename=/dynamic/tls.yaml"

            # Providers
            - "--providers.docker=true"
            - "--providers.docker.exposedbydefault=false"
            - "--providers.docker.network=proxy"

            # API & Dashboard
            - "--api.dashboard=true"
            - "--api.insecure=false"

            # Observability
            - "--log.level=INFO"
            - "--accesslog=true"
            - "--metrics.prometheus=true"

          # Traefik Dynamic configuration via Docker labels
          labels:
            # Enable self‑routing
            - "traefik.enable=false"

            # # Dashboard router
            # - "traefik.http.routers.dashboard.rule=Host(`dashboard.docker.localhost`)"
            # - "traefik.http.routers.dashboard.entrypoints=websecure"
            # - "traefik.http.routers.dashboard.service=api@internal"
            # - "traefik.http.routers.dashboard.tls=true"

            # # Basic‑auth middleware
            # - "traefik.http.middlewares.dashboard-auth.basicauth.users=<PASTE_HASH_HERE>"
            # - "traefik.http.routers.dashboard.middlewares=dashboard-auth@docker"

        # Whoami application
        whoami:
          image: traefik/whoami
          container_name: whoami
          restart: unless-stopped
          networks:
            - proxy
          labels:
            - "traefik.enable=true"
            - "traefik.http.routers.whoami.rule=Host(`{{ host_or_fqdn }}`)"
            - "traefik.http.routers.whoami.entrypoints=websecure"
            - "traefik.http.routers.whoami.tls=true"


    composefile_old:
      <<: *PROXY_NETWORK
      <<: *AUTOHEAL
      # <<: *HTTP_CHALLENGE
      # <<: *DNS_CHALLENGE
      # <<: *CROWDSEC
      # <<: *GEOBLOCK

      networks:
        default:

      services:
        traefik:
          <<: *DOCKER_SOCK_RO
          image: "traefik:v3.5"
          container_name: "traefik"
          hostname: "traefik"
          ports:
            - "80:80"
            - "443:443"
          command:
            - "--api.dashboard=true"
            - "--log.level=INFO"
            - "--providers.docker=true"
            - "--providers.docker.network={{ traefik_network_name }}"
            - "--entrypoints.{{ traefik_web_entrypoint_name }}.address=:80"
            - "--entrypoints.{{ traefik_websecure_entrypoint_name }}.address=:443"
            - "--certificatesresolvers.{{ traefik_resolver_name }}.acme.tlschallenge=true"
            - "--certificatesresolvers.{{ traefik_resolver_name }}.acme.email={{ traefik_acme_challenge_email }}"
            - "--certificatesresolvers.{{ traefik_resolver_name }}.acme.storage=/acme.json"
          labels:
            - "traefik.enable=false"
            # - "traefik.http.routers.dashboard.tls=true"
            # - "traefik.http.routers.dashboard.rule=Host(`dashboard.localhost`)"
            # - "traefik.http.routers.dashboard.entrypoints={{ traefik_websecure_entrypoint_name }}"
            # - "traefik.http.routers.dashboard.service={{ traefik_service_name }}"

        whoami:
          image: "traefik/whoami"
          container_name: "{{ host_or_fqdn }}"
          labels:
            - "traefik.enable=true"
            - "traefik.http.routers.{{ traefik_router_name }}.tls=true"
            - "traefik.http.routers.{{ traefik_router_name }}.rule=Host(`{{ host_or_fqdn }}`)"
            - "traefik.http.routers.{{ traefik_router_name }}.entrypoints={{ traefik_websecure_entrypoint_name }}"
            - "traefik.http.routers.{{ traefik_router_name }}.service={{ traefik_service_name }}"
            - "traefik.http.routers.{{ traefik_router_name }}.tls.certresolver={{ traefik_resolver_name }}"
            - "traefik.http.middlewares.{{ traefik_middleware_name }}.basicauth.users={{ http_secret }}"

        ntfy:
          image: "binwiederhier/ntfy"
          container_name: ntfy
          command:
            - "serve"
          volumes:
            - "/var/cache/ntfy:/var/cache/ntfy"
            - "/etc/ntfy:/etc/ntfy"
          restart: unless-stopped

          # labels:
          #   - "traefik.enable=true"
          #   - "traefik.http.routers.whoami.rule=Host(`{{ domain }}`)"
          #   - "traefik.http.routers.whoami.entrypoints=web"
          # environment:
          #   - TZ=UTC    # optional: set desired timezone
          # user: UID:GID # optional: replace with your own user/group or uid/gid
          # ports:
          #   - 10080:80

    http_secret: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      34656131653833313831363037396164356331626162616464616330393766663030306632363039
      3234613137373562663664633562363031326162333735320a633230383366353130313037613939
      63666234613965303464643566643734343630363664383139303138663363366164303964633462
      3635663830313531300a386433366633316230356666623735323435303961633064353461373538
      32306634636339383433333838366364393239353263646235646465383462323632343937303739
      33646566623439613732326161653937343736313532323337303935663435373435633566316635
      36396237623562646636326631633661316462376331336464393535363138653634663530336465
      34353066353266363336326464313736616336613837313431316465393039346664623538383235
      63333336663435643335383434366235396561383235626637666434663139323361

    traefik_acme_challenge_email: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      63313963646165633166333438393564333538636132363030643833643266663564303263363166
      3863646531656337653833613532653066353865656362650a346331353165663933626639303737
      34386434316666663434653830656537346430633234313930363330343032393835623864653866
      3535613263353033660a326561373438633562323332626665333965663931366332633336363638
      65613431353533336565646164306331616230643638396430396234363035353162

    ts_auth_key: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      36373131643239643731613633336436363530306365366436616334643662383838366539656263
      3936373864336237316130663936643537313465323134620a666262323639363462313463326361
      32373163646536343830643533643866386463366232643765306534626437393131633130666164
      3834633835353734370a613739333731346134646136303966626233316637393766373966303537
      34313630643339656530636435323234333939613433663531653830386365333562383837623735
      63666564613866643061326638353831313462616431366361666661393034643133346461333436
      326165646534613063333234373335316638

- name: UFW
  hosts: 'ubuntu-vm'
  connection: local
  gather_facts: false
  become: false
  become_user: root
  no_log: false
  tasks:
    - name: Open HTTP and HTTPS
      loop:
        - 80
        - 443
      community.general.ufw:
        rule: allow
        port: '{{ item }}'
        proto: tcp
...
